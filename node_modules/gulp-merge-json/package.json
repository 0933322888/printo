{
  "name": "gulp-merge-json",
  "version": "1.0.0",
  "description": "A gulp plugin to merge JSON files into one file",
  "author": {
    "name": "Josh Swan",
    "email": "josh@sportifik.com"
  },
  "main": "./index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/joshswan/gulp-merge-json"
  },
  "bugs": {
    "url": "https://github.com/joshswan/gulp-merge-json/issues"
  },
  "keywords": [
    "gulpplugin",
    "gulp",
    "json",
    "merge"
  ],
  "scripts": {
    "test": "istanbul test ./node_modules/mocha/bin/_mocha --report html -- test/*.js --reporter spec",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "dependencies": {
    "deprecate": "^1.0.0",
    "gulp-util": "^3.0.8",
    "json5": "^0.5.1",
    "lodash": "^4.17.4",
    "through": "^2.3.8"
  },
  "devDependencies": {
    "coveralls": "*",
    "eslint": "^3.9.1",
    "eslint-config-airbnb-base": "^11.1.0",
    "eslint-plugin-import": "^2.2.0",
    "gulp": "^3.9.0",
    "istanbul": "*",
    "mocha": "^3.2.0",
    "should": "^11.2.0"
  },
  "license": "MIT",
  "readme": "# gulp-merge-json\n[![NPM Version](https://badge.fury.io/js/gulp-merge-json.svg)](https://www.npmjs.com/package/gulp-merge-json) [![Build Status](https://travis-ci.org/joshswan/gulp-merge-json.svg?branch=master)](https://travis-ci.org/joshswan/gulp-merge-json) [![Coverage Status](https://coveralls.io/repos/joshswan/gulp-merge-json/badge.svg?branch=master&service=github)](https://coveralls.io/github/joshswan/gulp-merge-json?branch=master) [![Dependency Status](https://david-dm.org/joshswan/gulp-merge-json.svg)](https://david-dm.org/joshswan/gulp-merge-json) [![Dev Dependency Status](https://david-dm.org/joshswan/gulp-merge-json/dev-status.svg)](https://david-dm.org/joshswan/gulp-merge-json#info=devDependencies)\n\nA gulp plugin for deep-merging multiple JSON files into one file. Export as JSON or a node module.\n\n## Usage\n\n```javascript\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge(options))\n\t.pipe(gulp.dest('./dist'));\n```\n\n### Options\n\n| Key | Type | Default | Description |\n| ---- | ---- | ------- | ----------- |\n| `fileName` | `String` | `combined.json` | Output filename |\n| `edit` | `Function` | `json => json` | Edit function (add/remove/edit keys during merge) |\n| `startObj` | `Object/Array` | `{}` | Starting object to merge into (useful for providing default values) |\n| `endObj` | `Object/Array` | | Object to merge after file merging complete (useful for overwriting with special values) |\n| `exportModule` | `Boolean/String` | `false` | Output `module.exports = {MERGED_JSON_DATA};` or `{exportModule} = {MERGED_JSON_DATA}` when string passed |\n| `concatArrays` | `Boolean` | `false` | Whether to concatenate arrays instead of merging |\n| `mergeArrays` | `Boolean` | `true` | Whether to merge arrays or overwrite completely |\n| `jsonReplacer` | `Function` | | Custom JSON replacer function passed to stringify |\n| `jsonSpace` | `String` | `\\t` | String used for white space by stringify |\n| `json5` | `Boolean` | `false` | Use JSON5 instead of JSON for parse and stringify |\n\n## Examples\n```javascript\nvar merge = require('gulp-merge-json');\n\n/*\n\tBasic functionality\n */\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge())\n\t.pipe(gulp.dest('./dist'));\n\n/*\n\tEdit JSON with function\n */\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge({\n\t\tfileName: 'file.json',\n\t\tedit: (parsedJson, file) => {\n\t\t\tif (parsedJson.someValue) {\n\t\t\t\tdelete parsedJson.otherValue;\n\t\t\t}\n\n\t\t\treturn parsedJson;\n\t\t},\n\t}))\n\t.pipe(gulp.dest('./dist'));\n\n/*\n\tProvide a default object (files are merged in order so object values will be overwritten)\n */\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge({\n\t\tstartObj: { someKey: 'defaultValue' },\n\t}))\n\t.pipe(gulp.dest('./dist'));\n\n/*\n\tProvide an overwriting object (merged at the end)\n */\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge({\n\t\tendObj: { someKey: 'specialValue' },\n\t}))\n\t.pipe(gulp.dest('./dist'));\n\n/*\n\tOutput module.exports = {JSON_DATA}\n */\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge({\n\t\texportModule: true,\n\t}))\n\t.pipe(gulp.dest('./dist'));\n\n/*\n\tOutput a custom variable = {JSON_DATA}\n */\ngulp.src('jsonFiles/**/*.json')\n\t.pipe(merge({\n\t\tfileName: 'dataModule.js',\n\t\texportModule: 'const myVar',\n\t}))\n\t.pipe(gulp.dest('./dist'));\n\n/*\n  Provide replacer and space options for JSON.stringify\n*/\ngulp.src('jsonFiles/**/*.json')\n    .pipe(merge({\n        jsonSpace: '  ',\n        jsonReplacer: (key, value) => {/*...*/}\n    })\n    .pipe(gulp.dest('./dist'));\n\n\n/*\n\tJSON5\n */\ngulp.src('jsonFiles/**/*.json5')\n\t.pipe(merge({\n\t\tjson5: true,\n\t}))\n\t.pipe(gulp.dest('./dist'));\n```\n\n\n### Example Input\n```JSON\n/*\n\tjson/defaults.json\n */\n{\n\t\"key1\": {\n\t\t\"data1\": \"value1\",\n\t\t\"data2\": \"value2\"\n\t},\n\t\"key2\": {\n\t\t\"dataA\": \"valueA\",\n\t\t\"dataB\": {\n\t\t\t\"a\": \"b\",\n\t\t\t\"c\": \"d\"\n\t\t}\n\t}\n}\n\n/*\n\tjson/development.json\n */\n{\n\t\"key1\": {\n\t\t\"data1\": \"devValue\"\n\t},\n\t\"key2\": {\n\t\t\"dataB\": {\n\t\t\t\"c\": \"DEV MODE!\"\n\t\t}\n\t},\n\t\"key3\": {\n\t\t\"important\": \"value\"\n\t}\n}\n```\n\n### Example Output\n```JSON\n/*\n\tdist/combined.json\n */\n{\n\t\"key1\": {\n\t\t\"data1\": \"devValue\",\n\t\t\"data2\": \"value2\"\n\t},\n\t\"key2\": {\n\t\t\"dataA\": \"valueA\",\n\t\t\"dataB\": {\n\t\t\t\"dataA\": \"valueA\",\n\t\t\t\"dataB\": {\n\t\t\t\t\"a\": \"b\",\n\t\t\t\t\"c\": \"DEV MODE!\"\n\t\t\t}\n\t\t}\n\t},\n\t\"key3\": {\n\t\t\"important\": \"value\"\n\t}\n}\n```\n",
  "readmeFilename": "README.md",
  "_id": "gulp-merge-json@1.0.0",
  "dist": {
    "shasum": "742653883347f7ac6a4ddaf5a5160f3bbcc2cb04"
  },
  "_from": "gulp-merge-json@^1.0.0",
  "_resolved": "https://registry.npmjs.org/gulp-merge-json/-/gulp-merge-json-1.0.0.tgz"
}
